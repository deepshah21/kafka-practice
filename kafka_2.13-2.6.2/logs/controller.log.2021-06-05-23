[2021-06-05 23:10:00,903] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2021-06-05 23:10:40,283] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2021-06-05 23:10:41,396] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2021-06-05 23:10:41,397] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2021-06-05 23:10:41,404] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2021-06-05 23:10:41,410] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2021-06-05 23:10:41,413] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2021-06-05 23:10:41,621] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 24) (kafka.controller.KafkaController)
[2021-06-05 23:10:41,679] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2021-06-05 23:10:41,737] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2021-06-05 23:10:42,196] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2021-06-05 23:10:42,215] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2021-06-05 23:10:42,216] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2021-06-05 23:10:42,216] INFO [Controller id=1] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2021-06-05 23:10:42,217] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2021-06-05 23:10:42,221] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,246] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,247] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2021-06-05 23:10:42,248] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2021-06-05 23:10:42,256] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2021-06-05 23:10:42,369] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2021-06-05 23:10:42,370] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2021-06-05 23:10:42,391] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2021-06-05 23:10:42,392] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2021-06-05 23:10:42,393] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2021-06-05 23:10:42,394] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2021-06-05 23:10:42,403] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2021-06-05 23:10:42,404] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2021-06-05 23:10:42,424] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,424] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,425] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,425] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2021-06-05 23:10:42,463] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2021-06-05 23:10:42,494] INFO [RequestSendThread controllerId=1] Controller 1 connected to wolverine:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2021-06-05 23:10:42,578] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2021-06-05 23:10:45,511] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 1,2 (kafka.controller.KafkaController)
[2021-06-05 23:10:45,512] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2021-06-05 23:10:45,528] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2021-06-05 23:10:45,531] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2021-06-05 23:10:45,534] INFO [RequestSendThread controllerId=1] Controller 1 connected to wolverine:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2021-06-05 23:10:45,546] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2021-06-05 23:10:45,552] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 24, 2 -> 43) (kafka.controller.KafkaController)
[2021-06-05 23:10:45,714] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2021-06-05 23:10:45,735] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2021-06-05 23:10:47,580] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:10:47,582] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:14:55,418] INFO [Controller id=1] New topics: [Set(quickstart-events)], deleted topics: [HashSet()], new partition replica assignment [Map(quickstart-events-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2021-06-05 23:14:55,489] INFO [Controller id=1] New partition creation callback for quickstart-events-0 (kafka.controller.KafkaController)
[2021-06-05 23:15:37,211] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2021-06-05 23:15:37,211] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2021-06-05 23:15:47,585] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:15:47,585] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:15:47,591] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:15:47,593] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:15:47,593] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:15:47,593] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:20:47,594] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:20:47,618] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:20:47,620] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:20:47,620] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:20:47,621] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:20:47,621] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:25:47,621] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:25:47,704] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:25:47,708] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:25:47,708] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:25:47,709] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:25:47,709] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:30:47,709] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:30:47,802] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:30:47,805] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:30:47,805] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:30:47,805] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:30:47,805] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:35:47,805] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:35:47,806] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:35:47,807] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:35:47,807] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:35:47,807] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:35:47,807] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:40:47,808] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:40:47,808] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:40:47,812] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:40:47,812] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:40:47,813] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:40:47,813] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:45:47,813] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:45:47,814] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:45:47,817] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:45:47,817] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:45:47,817] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:45:47,817] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:50:47,818] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:50:47,818] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:50:47,821] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:50:47,821] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:50:47,821] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:50:47,821] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:55:47,822] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2021-06-05 23:55:47,822] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2021-06-05 23:55:47,824] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:55:47,824] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2021-06-05 23:55:47,825] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2021-06-05 23:55:47,825] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
